$date
	Mon Jun 24 13:09:34 2024
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module test_potential_adder $end
$var wire 1 ! spike $end
$var wire 32 " final_potential [31:0] $end
$var reg 1 # CLK $end
$var reg 4 $ CLK_count [3:0] $end
$var reg 32 % a [31:0] $end
$var reg 32 & b [31:0] $end
$var reg 32 ' c [31:0] $end
$var reg 1 ( clear $end
$var reg 32 ) d [31:0] $end
$var reg 32 * decayed_potential [31:0] $end
$var reg 32 + input_weight [31:0] $end
$var reg 2 , model [1:0] $end
$var reg 32 - u_initialize [31:0] $end
$var reg 32 . v_threshold [31:0] $end
$scope begin genblk1[0] $end
$scope module pd $end
$var wire 32 / a [31:0] $end
$var wire 32 0 b [31:0] $end
$var wire 32 1 c [31:0] $end
$var wire 1 ( clear $end
$var wire 32 2 d [31:0] $end
$var wire 32 3 decayed_potential [31:0] $end
$var wire 32 4 input_weight [31:0] $end
$var wire 2 5 model [1:0] $end
$var wire 32 6 u_initialize [31:0] $end
$var wire 32 7 v_threshold [31:0] $end
$var wire 32 8 weight_added_u [31:0] $end
$var wire 32 9 weight_added_Q [31:0] $end
$var wire 32 : weight_added [31:0] $end
$var wire 32 ; u_plus_d [31:0] $end
$var wire 32 < reset_value_Q [31:0] $end
$var wire 32 = reset_value [31:0] $end
$var wire 1 > greater_izhi $end
$var wire 1 ? greater_Q $end
$var wire 1 @ greater $end
$var wire 32 A bv_u [31:0] $end
$var wire 32 B bv [31:0] $end
$var wire 32 C a_bv_u [31:0] $end
$var wire 1 D Underflow5 $end
$var wire 1 E Underflow3 $end
$var wire 1 F Overflow5 $end
$var wire 1 G Overflow3 $end
$var wire 1 H Exception_Q_2 $end
$var wire 1 I Exception_Q_1 $end
$var wire 1 J Exception6 $end
$var wire 1 K Exception5 $end
$var wire 1 L Exception4 $end
$var wire 1 M Exception3 $end
$var wire 1 N Exception2 $end
$var wire 1 O Exception1 $end
$var wire 1 P Exception $end
$var reg 32 Q final_potential [31:0] $end
$var reg 1 ! spike $end
$var reg 32 R u [31:0] $end
$scope module Addition_Subtraction_1 $end
$var wire 1 S AddBar_Sub $end
$var wire 1 O Exception $end
$var wire 32 T b_operand [31:0] $end
$var wire 1 U operation_sub_addBar $end
$var wire 1 V output_sign $end
$var wire 25 W subtraction_diff [24:0] $end
$var wire 31 X sub_diff [30:0] $end
$var wire 24 Y significand_sub_complement [23:0] $end
$var wire 25 Z significand_sub [24:0] $end
$var wire 24 [ significand_b_add_sub [23:0] $end
$var wire 24 \ significand_b [23:0] $end
$var wire 25 ] significand_add [24:0] $end
$var wire 24 ^ significand_a [23:0] $end
$var wire 32 _ result [31:0] $end
$var wire 1 ` perform $end
$var wire 32 a operand_b [31:0] $end
$var wire 32 b operand_a [31:0] $end
$var wire 8 c exponent_sub [7:0] $end
$var wire 8 d exponent_diff [7:0] $end
$var wire 8 e exponent_b_add_sub [7:0] $end
$var wire 31 f add_sum [30:0] $end
$var wire 32 g a_operand [31:0] $end
$var wire 1 h Comp_enable $end
$scope module pe $end
$var wire 8 i Exponent_a [7:0] $end
$var wire 25 j significand [24:0] $end
$var wire 8 k Exponent_sub [7:0] $end
$var reg 25 l Significand [24:0] $end
$var reg 5 m shift [4:0] $end
$upscope $end
$upscope $end
$scope module Addition_Subtraction_2 $end
$var wire 1 n AddBar_Sub $end
$var wire 1 P Exception $end
$var wire 32 o a_operand [31:0] $end
$var wire 32 p b_operand [31:0] $end
$var wire 1 q operation_sub_addBar $end
$var wire 1 r output_sign $end
$var wire 25 s subtraction_diff [24:0] $end
$var wire 31 t sub_diff [30:0] $end
$var wire 24 u significand_sub_complement [23:0] $end
$var wire 25 v significand_sub [24:0] $end
$var wire 24 w significand_b_add_sub [23:0] $end
$var wire 24 x significand_b [23:0] $end
$var wire 25 y significand_add [24:0] $end
$var wire 24 z significand_a [23:0] $end
$var wire 32 { result [31:0] $end
$var wire 1 | perform $end
$var wire 32 } operand_b [31:0] $end
$var wire 32 ~ operand_a [31:0] $end
$var wire 8 !" exponent_sub [7:0] $end
$var wire 8 "" exponent_diff [7:0] $end
$var wire 8 #" exponent_b_add_sub [7:0] $end
$var wire 31 $" add_sum [30:0] $end
$var wire 1 %" Comp_enable $end
$scope module pe $end
$var wire 8 &" Exponent_a [7:0] $end
$var wire 25 '" significand [24:0] $end
$var wire 8 (" Exponent_sub [7:0] $end
$var reg 25 )" Significand [24:0] $end
$var reg 5 *" shift [4:0] $end
$upscope $end
$upscope $end
$scope module Addition_Subtraction_3 $end
$var wire 1 +" AddBar_Sub $end
$var wire 1 N Exception $end
$var wire 32 ," a_operand [31:0] $end
$var wire 32 -" b_operand [31:0] $end
$var wire 1 ." operation_sub_addBar $end
$var wire 1 /" output_sign $end
$var wire 25 0" subtraction_diff [24:0] $end
$var wire 31 1" sub_diff [30:0] $end
$var wire 24 2" significand_sub_complement [23:0] $end
$var wire 25 3" significand_sub [24:0] $end
$var wire 24 4" significand_b_add_sub [23:0] $end
$var wire 24 5" significand_b [23:0] $end
$var wire 25 6" significand_add [24:0] $end
$var wire 24 7" significand_a [23:0] $end
$var wire 32 8" result [31:0] $end
$var wire 1 9" perform $end
$var wire 32 :" operand_b [31:0] $end
$var wire 32 ;" operand_a [31:0] $end
$var wire 8 <" exponent_sub [7:0] $end
$var wire 8 =" exponent_diff [7:0] $end
$var wire 8 >" exponent_b_add_sub [7:0] $end
$var wire 31 ?" add_sum [30:0] $end
$var wire 1 @" Comp_enable $end
$scope module pe $end
$var wire 8 A" Exponent_a [7:0] $end
$var wire 25 B" significand [24:0] $end
$var wire 8 C" Exponent_sub [7:0] $end
$var reg 25 D" Significand [24:0] $end
$var reg 5 E" shift [4:0] $end
$upscope $end
$upscope $end
$scope module Addition_Subtraction_4 $end
$var wire 1 F" AddBar_Sub $end
$var wire 1 L Exception $end
$var wire 32 G" b_operand [31:0] $end
$var wire 1 H" operation_sub_addBar $end
$var wire 1 I" output_sign $end
$var wire 25 J" subtraction_diff [24:0] $end
$var wire 31 K" sub_diff [30:0] $end
$var wire 24 L" significand_sub_complement [23:0] $end
$var wire 25 M" significand_sub [24:0] $end
$var wire 24 N" significand_b_add_sub [23:0] $end
$var wire 24 O" significand_b [23:0] $end
$var wire 25 P" significand_add [24:0] $end
$var wire 24 Q" significand_a [23:0] $end
$var wire 32 R" result [31:0] $end
$var wire 1 S" perform $end
$var wire 32 T" operand_b [31:0] $end
$var wire 32 U" operand_a [31:0] $end
$var wire 8 V" exponent_sub [7:0] $end
$var wire 8 W" exponent_diff [7:0] $end
$var wire 8 X" exponent_b_add_sub [7:0] $end
$var wire 31 Y" add_sum [30:0] $end
$var wire 32 Z" a_operand [31:0] $end
$var wire 1 [" Comp_enable $end
$scope module pe $end
$var wire 8 \" Exponent_a [7:0] $end
$var wire 25 ]" significand [24:0] $end
$var wire 8 ^" Exponent_sub [7:0] $end
$var reg 25 _" Significand [24:0] $end
$var reg 5 `" shift [4:0] $end
$upscope $end
$upscope $end
$scope module Addition_Subtraction_7 $end
$var wire 1 a" AddBar_Sub $end
$var wire 1 J Exception $end
$var wire 32 b" a_operand [31:0] $end
$var wire 32 c" b_operand [31:0] $end
$var wire 1 d" operation_sub_addBar $end
$var wire 1 e" output_sign $end
$var wire 25 f" subtraction_diff [24:0] $end
$var wire 31 g" sub_diff [30:0] $end
$var wire 24 h" significand_sub_complement [23:0] $end
$var wire 25 i" significand_sub [24:0] $end
$var wire 24 j" significand_b_add_sub [23:0] $end
$var wire 24 k" significand_b [23:0] $end
$var wire 25 l" significand_add [24:0] $end
$var wire 24 m" significand_a [23:0] $end
$var wire 32 n" result [31:0] $end
$var wire 1 o" perform $end
$var wire 32 p" operand_b [31:0] $end
$var wire 32 q" operand_a [31:0] $end
$var wire 8 r" exponent_sub [7:0] $end
$var wire 8 s" exponent_diff [7:0] $end
$var wire 8 t" exponent_b_add_sub [7:0] $end
$var wire 31 u" add_sum [30:0] $end
$var wire 1 v" Comp_enable $end
$scope module pe $end
$var wire 8 w" Exponent_a [7:0] $end
$var wire 25 x" significand [24:0] $end
$var wire 8 y" Exponent_sub [7:0] $end
$var reg 25 z" Significand [24:0] $end
$var reg 5 {" shift [4:0] $end
$upscope $end
$upscope $end
$scope module Addition_Subtraction_Q_1 $end
$var wire 1 |" AddBar_Sub $end
$var wire 1 I Exception $end
$var wire 32 }" a_operand [31:0] $end
$var wire 32 ~" b_operand [31:0] $end
$var wire 1 !# operation_sub_addBar $end
$var wire 1 "# output_sign $end
$var wire 25 ## subtraction_diff [24:0] $end
$var wire 31 $# sub_diff [30:0] $end
$var wire 24 %# significand_sub_complement [23:0] $end
$var wire 25 &# significand_sub [24:0] $end
$var wire 24 '# significand_b_add_sub [23:0] $end
$var wire 24 (# significand_b [23:0] $end
$var wire 25 )# significand_add [24:0] $end
$var wire 24 *# significand_a [23:0] $end
$var wire 32 +# result [31:0] $end
$var wire 1 ,# perform $end
$var wire 32 -# operand_b [31:0] $end
$var wire 32 .# operand_a [31:0] $end
$var wire 8 /# exponent_sub [7:0] $end
$var wire 8 0# exponent_diff [7:0] $end
$var wire 8 1# exponent_b_add_sub [7:0] $end
$var wire 31 2# add_sum [30:0] $end
$var wire 1 3# Comp_enable $end
$scope module pe $end
$var wire 8 4# Exponent_a [7:0] $end
$var wire 25 5# significand [24:0] $end
$var wire 8 6# Exponent_sub [7:0] $end
$var reg 25 7# Significand [24:0] $end
$var reg 5 8# shift [4:0] $end
$upscope $end
$upscope $end
$scope module Addition_Subtraction_Q_2 $end
$var wire 1 9# AddBar_Sub $end
$var wire 1 H Exception $end
$var wire 32 :# a_operand [31:0] $end
$var wire 32 ;# b_operand [31:0] $end
$var wire 1 <# operation_sub_addBar $end
$var wire 1 =# output_sign $end
$var wire 25 ># subtraction_diff [24:0] $end
$var wire 31 ?# sub_diff [30:0] $end
$var wire 24 @# significand_sub_complement [23:0] $end
$var wire 25 A# significand_sub [24:0] $end
$var wire 24 B# significand_b_add_sub [23:0] $end
$var wire 24 C# significand_b [23:0] $end
$var wire 25 D# significand_add [24:0] $end
$var wire 24 E# significand_a [23:0] $end
$var wire 32 F# result [31:0] $end
$var wire 1 G# perform $end
$var wire 32 H# operand_b [31:0] $end
$var wire 32 I# operand_a [31:0] $end
$var wire 8 J# exponent_sub [7:0] $end
$var wire 8 K# exponent_diff [7:0] $end
$var wire 8 L# exponent_b_add_sub [7:0] $end
$var wire 31 M# add_sum [30:0] $end
$var wire 1 N# Comp_enable $end
$scope module pe $end
$var wire 8 O# Exponent_a [7:0] $end
$var wire 25 P# significand [24:0] $end
$var wire 8 Q# Exponent_sub [7:0] $end
$var reg 25 R# Significand [24:0] $end
$var reg 5 S# shift [4:0] $end
$upscope $end
$upscope $end
$scope module Multiplication_1 $end
$var wire 1 M Exception $end
$var wire 1 G Overflow $end
$var wire 32 T# a_operand [31:0] $end
$var wire 32 U# b_operand [31:0] $end
$var wire 1 V# sign $end
$var wire 1 W# zero $end
$var wire 9 X# sum_exponent [8:0] $end
$var wire 32 Y# result [31:0] $end
$var wire 1 Z# product_round $end
$var wire 48 [# product_normalised [47:0] $end
$var wire 23 \# product_mantissa [22:0] $end
$var wire 48 ]# product [47:0] $end
$var wire 24 ^# operand_b [23:0] $end
$var wire 24 _# operand_a [23:0] $end
$var wire 1 `# normalised $end
$var wire 9 a# exponent [8:0] $end
$var wire 1 E Underflow $end
$upscope $end
$scope module Multiplication_2 $end
$var wire 1 K Exception $end
$var wire 1 F Overflow $end
$var wire 32 b# a_operand [31:0] $end
$var wire 32 c# b_operand [31:0] $end
$var wire 1 d# sign $end
$var wire 1 e# zero $end
$var wire 9 f# sum_exponent [8:0] $end
$var wire 32 g# result [31:0] $end
$var wire 1 h# product_round $end
$var wire 48 i# product_normalised [47:0] $end
$var wire 23 j# product_mantissa [22:0] $end
$var wire 48 k# product [47:0] $end
$var wire 24 l# operand_b [23:0] $end
$var wire 24 m# operand_a [23:0] $end
$var wire 1 n# normalised $end
$var wire 9 o# exponent [8:0] $end
$var wire 1 D Underflow $end
$upscope $end
$scope module comparator_2 $end
$var wire 32 p# a_operand [31:0] $end
$var wire 32 q# b_operand [31:0] $end
$var wire 32 r# result [31:0] $end
$var wire 1 s# Exception $end
$var reg 1 @ greater $end
$var reg 1 t# sign $end
$scope module Addition_Subtraction_1 $end
$var wire 1 u# AddBar_Sub $end
$var wire 1 s# Exception $end
$var wire 32 v# a_operand [31:0] $end
$var wire 32 w# b_operand [31:0] $end
$var wire 1 x# operation_sub_addBar $end
$var wire 1 y# output_sign $end
$var wire 25 z# subtraction_diff [24:0] $end
$var wire 31 {# sub_diff [30:0] $end
$var wire 24 |# significand_sub_complement [23:0] $end
$var wire 25 }# significand_sub [24:0] $end
$var wire 24 ~# significand_b_add_sub [23:0] $end
$var wire 24 !$ significand_b [23:0] $end
$var wire 25 "$ significand_add [24:0] $end
$var wire 24 #$ significand_a [23:0] $end
$var wire 32 $$ result [31:0] $end
$var wire 1 %$ perform $end
$var wire 32 &$ operand_b [31:0] $end
$var wire 32 '$ operand_a [31:0] $end
$var wire 8 ($ exponent_sub [7:0] $end
$var wire 8 )$ exponent_diff [7:0] $end
$var wire 8 *$ exponent_b_add_sub [7:0] $end
$var wire 31 +$ add_sum [30:0] $end
$var wire 1 ,$ Comp_enable $end
$scope module pe $end
$var wire 8 -$ Exponent_a [7:0] $end
$var wire 25 .$ significand [24:0] $end
$var wire 8 /$ Exponent_sub [7:0] $end
$var reg 25 0$ Significand [24:0] $end
$var reg 5 1$ shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module comparator_3 $end
$var wire 32 2$ a_operand [31:0] $end
$var wire 32 3$ b_operand [31:0] $end
$var wire 32 4$ result [31:0] $end
$var wire 1 5$ Exception $end
$var reg 1 > greater $end
$var reg 1 6$ sign $end
$scope module Addition_Subtraction_1 $end
$var wire 1 7$ AddBar_Sub $end
$var wire 1 5$ Exception $end
$var wire 32 8$ a_operand [31:0] $end
$var wire 32 9$ b_operand [31:0] $end
$var wire 1 :$ operation_sub_addBar $end
$var wire 1 ;$ output_sign $end
$var wire 25 <$ subtraction_diff [24:0] $end
$var wire 31 =$ sub_diff [30:0] $end
$var wire 24 >$ significand_sub_complement [23:0] $end
$var wire 25 ?$ significand_sub [24:0] $end
$var wire 24 @$ significand_b_add_sub [23:0] $end
$var wire 24 A$ significand_b [23:0] $end
$var wire 25 B$ significand_add [24:0] $end
$var wire 24 C$ significand_a [23:0] $end
$var wire 32 D$ result [31:0] $end
$var wire 1 E$ perform $end
$var wire 32 F$ operand_b [31:0] $end
$var wire 32 G$ operand_a [31:0] $end
$var wire 8 H$ exponent_sub [7:0] $end
$var wire 8 I$ exponent_diff [7:0] $end
$var wire 8 J$ exponent_b_add_sub [7:0] $end
$var wire 31 K$ add_sum [30:0] $end
$var wire 1 L$ Comp_enable $end
$scope module pe $end
$var wire 8 M$ Exponent_a [7:0] $end
$var wire 25 N$ significand [24:0] $end
$var wire 8 O$ Exponent_sub [7:0] $end
$var reg 25 P$ Significand [24:0] $end
$var reg 5 Q$ shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module comparator_Q_1 $end
$var wire 32 R$ a_operand [31:0] $end
$var wire 32 S$ b_operand [31:0] $end
$var wire 32 T$ result [31:0] $end
$var wire 1 U$ Exception $end
$var reg 1 ? greater $end
$var reg 1 V$ sign $end
$scope module Addition_Subtraction_1 $end
$var wire 1 W$ AddBar_Sub $end
$var wire 1 U$ Exception $end
$var wire 32 X$ a_operand [31:0] $end
$var wire 32 Y$ b_operand [31:0] $end
$var wire 1 Z$ operation_sub_addBar $end
$var wire 1 [$ output_sign $end
$var wire 25 \$ subtraction_diff [24:0] $end
$var wire 31 ]$ sub_diff [30:0] $end
$var wire 24 ^$ significand_sub_complement [23:0] $end
$var wire 25 _$ significand_sub [24:0] $end
$var wire 24 `$ significand_b_add_sub [23:0] $end
$var wire 24 a$ significand_b [23:0] $end
$var wire 25 b$ significand_add [24:0] $end
$var wire 24 c$ significand_a [23:0] $end
$var wire 32 d$ result [31:0] $end
$var wire 1 e$ perform $end
$var wire 32 f$ operand_b [31:0] $end
$var wire 32 g$ operand_a [31:0] $end
$var wire 8 h$ exponent_sub [7:0] $end
$var wire 8 i$ exponent_diff [7:0] $end
$var wire 8 j$ exponent_b_add_sub [7:0] $end
$var wire 31 k$ add_sum [30:0] $end
$var wire 1 l$ Comp_enable $end
$scope module pe $end
$var wire 8 m$ Exponent_a [7:0] $end
$var wire 25 n$ significand [24:0] $end
$var wire 8 o$ Exponent_sub [7:0] $end
$var reg 25 p$ Significand [24:0] $end
$var reg 5 q$ shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx q$
bx p$
bx o$
bx n$
bx m$
xl$
bx k$
bx j$
bx i$
bx h$
bx g$
bx f$
xe$
bx d$
bx c$
bx b$
bx a$
bx `$
bx _$
bx ^$
bx ]$
bx \$
x[$
xZ$
b1000010001000000000000000000000 Y$
bx X$
1W$
xV$
xU$
bx T$
b1000010001000000000000000000000 S$
bx R$
bx Q$
bx P$
bx O$
bx N$
bx M$
xL$
bx K$
bx J$
bx I$
bx H$
bx G$
bx F$
xE$
bx D$
bx C$
bx B$
bx A$
bx @$
bx ?$
bx >$
bx =$
bx <$
x;$
x:$
b1000010001000000000000000000000 9$
bx 8$
17$
x6$
x5$
bx 4$
b1000010001000000000000000000000 3$
bx 2$
bx 1$
bx 0$
bx /$
bx .$
bx -$
x,$
bx +$
bx *$
bx )$
bx ($
bx '$
bx &$
x%$
bx $$
bx #$
bx "$
bx !$
bx ~#
bx }#
bx |#
bx {#
bx z#
xy#
xx#
b1000010001000000000000000000000 w#
bx v#
1u#
xt#
xs#
bx r#
b1000010001000000000000000000000 q#
bx p#
bx o#
xn#
b100001111100011110101110 m#
bx l#
bx k#
bx j#
bx i#
xh#
bx g#
bx f#
xe#
xd#
bx c#
b1000010100001111100011110101110 b#
bx a#
x`#
b100001111100011110101110 _#
bx ^#
bx ]#
bx \#
bx [#
xZ#
bx Y#
bx X#
xW#
xV#
bx U#
b1000010100001111100011110101110 T#
bx S#
bx R#
bx Q#
bx P#
bx O#
xN#
bx M#
bx L#
bx K#
bx J#
bx I#
bx H#
xG#
bx F#
bx E#
bx D#
bx C#
bx B#
bx A#
bx @#
bx ?#
bx >#
x=#
x<#
b1000010001000000000000000000000 ;#
bx :#
19#
bx 8#
bx 7#
bx 6#
bx 5#
bx 4#
x3#
bx 2#
bx 1#
bx 0#
bx /#
bx .#
bx -#
x,#
bx +#
bx *#
bx )#
bx (#
bx '#
bx &#
bx %#
bx $#
bx ##
x"#
x!#
bx ~"
bx }"
1|"
bx {"
bx z"
bx y"
bx x"
bx w"
xv"
bx u"
bx t"
bx s"
bx r"
bx q"
bx p"
xo"
bx n"
bx m"
bx l"
bx k"
bx j"
bx i"
bx h"
bx g"
bx f"
xe"
xd"
bx c"
b1000010100001111100011110101110 b"
1a"
bx `"
bx _"
bx ^"
bx ]"
bx \"
x["
bx Z"
bx Y"
bx X"
bx W"
bx V"
bx U"
bx T"
xS"
bx R"
bx Q"
bx P"
bx O"
bx N"
bx M"
bx L"
bx K"
bx J"
xI"
xH"
bx G"
1F"
bx E"
bx D"
bx C"
bx B"
bx A"
x@"
bx ?"
bx >"
bx ="
bx <"
bx ;"
bx :"
x9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
x/"
x."
bx -"
bx ,"
1+"
bx *"
bx )"
bx ("
bx '"
bx &"
x%"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
x|
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
xr
xq
bx p
bx o
0n
bx m
bx l
bx k
bx j
bx i
xh
bx g
bx f
bx e
bx d
bx c
bx b
bx a
x`
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
xV
xU
b1000010001000000000000000000000 T
1S
bx R
bx Q
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xD
bx C
bx B
bx A
x@
x?
x>
bx =
bx <
bx ;
bx :
bx 9
bx 8
b1000010001000000000000000000000 7
b1000010100001111100011110101110 6
b0 5
bx 4
bx 3
b1000010100001111100011110101110 2
b1000010100001111100011110101110 1
b1000010100001111100011110101110 0
b1000010100001111100011110101110 /
b1000010001000000000000000000000 .
b1000010100001111100011110101110 -
b0 ,
bx +
bx *
b1000010100001111100011110101110 )
0(
b1000010100001111100011110101110 '
b1000010100001111100011110101110 &
b1000010100001111100011110101110 %
b0 $
0#
bx "
0!
$end
#40
b1 $
1#
#80
0#
#120
b10 $
1#
#160
0#
#200
b11 $
1#
#240
0#
#280
1(
b0 $
1#
#320
0#
#360
0(
b1 $
1#
#400
0#
#440
b10 $
1#
#480
0#
#520
b11 $
1#
#560
0#
#600
b1000010000010000011000111101011 ?#
b10000100 J#
b10000100 Q#
b0 S#
b1100010000011000111101011 >#
b1100010000011000111101011 R#
b1000010000010000011000111101011 ]$
b10000100 h$
b10000100 o$
b0 q$
b1100010000011000111101011 \$
b1100010000011000111101011 p$
b1000010100000101111000101000111 {#
b10000101 ($
b10000101 /$
b0 1$
b1100000101111000101000111 z#
b1100000101111000101000111 0$
b1100010000011000111101011 A#
b1100010000011000111101011 P#
b1100010000011000111101011 _$
b1100010000011000111101011 n$
b1100000101111000101000111 }#
b1100000101111000101000111 .$
b1000010100000101111000101000111 X
b10000101 c
b10000101 k
b0 m
b1100000101111000101000111 W
b1100000101111000101000111 l
b111010000011000111101011 @#
1!
b111010000011000111101011 ^$
0?
1V$
b101100000000000000000000 |#
1@
0t#
b1100000101111000101000111 Z
b1100000101111000101000111 j
b11000010000010000011000111101011 <
b11000010000010000011000111101011 F#
b11000010000010000011000111101011 T$
b11000010000010000011000111101011 d$
b1000010100000101111000101000111 r#
b1000010100000101111000101000111 $$
b101100000000000000000000 Y
b1000010100000101111000101000111 =
b1000010100000101111000101000111 _
b101111100111000010101 B#
1G#
b10000100 L#
b11 K#
1=#
b101111100111000010101000 C#
0H
b101000000000000000000000 E#
b101111100111000010101 `$
1e$
b10000100 j$
b11 i$
1[$
b101111100111000010101000 a$
0U$
b101000000000000000000000 c$
b10100000000000000000000 ~#
1%$
b10000101 *$
b1 )$
0y#
1N#
b10000100 O#
1l$
b10000100 m$
0,$
b10100000000000000000000 [
1`
b10000101 e
b1 d
0V
b1000010100000000000000000000000 +$
b1000010100000000000000000000000 f
b1000010000000000000000000000000 M#
b1000010000000000000000000000000 k$
0h
b0 "$
b0 ]
b101000000000000000000000 !$
0s#
b110100101111000101000111 #$
b101000000000000000000000 \
0O
b110100101111000101000111 ^
b0 D#
b0 b$
b10000101 -$
b10000101 i
b1000000101111100111000010101000 $#
b10000001 /#
b10000001 6#
b11 8#
b101111100111000010101000 ##
b101111100111000010101000 7#
0x#
0U
b1000010001000010010011110101110 t
b10000100 !"
b10000100 ("
b0 *"
b1001000010010011110101110 s
b1001000010010011110101110 )"
0<#
0Z$
b1000101111100111000010101 &#
b1000101111100111000010101 5#
0W#
0E
b110111101101100001010010 v
b110111101101100001010010 '"
b1110001111010111000011 %#
0G
b1000010001000000000000000000000 &$
b1000010110100101111000101000111 '$
b1000010001000000000000000000000 a
b1000010110100101111000101000111 b
b0 u
b1000000101111100111000010101000 H#
b1000010001000000000000000000000 I#
b1000000101111100111000010101000 f$
b1000010001000000000000000000000 g$
b1101001011110001010001111 y
b11011000110001111001010 \#
b1000010100000101111000101000111 "
b1000010100000101111000101000111 Q
1Z#
b1000010110100101111000101000111 :
b1000010110100101111000101000111 g
b1000010110100101111000101000111 {
b1000010110100101111000101000111 ,"
b1000010110100101111000101000111 p#
b1000010110100101111000101000111 v#
1q
b0 )#
b1000000101111100111000010101000 9
b1000000101111100111000010101000 +#
b1000000101111100111000010101000 :#
b1000000101111100111000010101000 R$
b1000000101111100111000010101000 X$
b1000101011011000110001111001010 B
b1000101011011000110001111001010 Z"
b1000101011011000110001111001010 Y#
b10001010 a#
0`#
b110001110000101000111101 w
b110001110000101000111101 x
0P
b110111101101100001010010 z
b1000010110100101111000101000111 $"
b110001110000101000111101 '#
b110001110000101000111101 (#
0I
0"#
0!#
b110111101101100001010010 *#
b1000010000000000000000000000000 2#
1%"
03#
b111011000110001111001001101110011000101101111000 [#
1|
b10000100 #"
b0 ""
0r
b10000100 &"
1,#
b10000100 1#
b0 0#
b10000100 4#
0V#
0M
b11101100011000111100100110111001100010110111100 ]#
b110111101101100001010010 ^#
b1000010010001110000101000111101 }
b1000010010111101101100001010010 ~
b1000010010001110000101000111101 -#
b1000010010111101101100001010010 .#
1(
b0 $
b100001001 X#
1#
b1000010010111101101100001010010 *
b1000010010111101101100001010010 3
b1000010010111101101100001010010 p
b1000010010111101101100001010010 }"
b1000010010111101101100001010010 U#
b1000010010001110000101000111101 +
b1000010010001110000101000111101 4
b1000010010001110000101000111101 o
b1000010010001110000101000111101 ~"
#640
0#
#680
0(
b1 $
1#
#720
0#
#760
b10 $
1#
#800
0#
#840
b11 $
1#
#880
0#
#920
1!
1(
b0 $
1#
#960
0#
#1000
0(
b1 $
1#
#1040
0#
#1080
b10 $
1#
#1120
0#
#1160
b11 $
1#
#1200
0#
#1240
1!
1(
b0 $
1#
#1280
0#
#1320
0(
b1 $
1#
#1360
0#
#1400
b10 $
1#
#1440
0#
#1480
b11 $
1#
#1520
0#
#1560
1!
1(
b0 $
1#
#1600
0#
#1640
0(
b1 $
1#
#1680
0#
#1720
b10 $
1#
#1760
0#
#1800
b11 $
1#
#1840
0#
#1880
1!
1(
b0 $
1#
#1920
0#
#1960
0(
b1 $
1#
#2000
0#
